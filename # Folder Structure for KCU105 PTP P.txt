# Folder Structure for KCU105 PTP Project

project_root/
├── main.c                             # Application entry point
├── ptpd.c                             # Full PTP daemon logic (you just pasted)
├── ptpd.h                             # Header for ptpd.c (include declarations)
├── platform/                          # Platform-specific files
│   ├── platform.c                     # Clock setup, SFP config, etc.
│   └── platform.h
├── include/
│   ├── ptpd/                          # All PTP-related headers
│   │   ├── ptpd.h
│   │   ├── protocol.h
│   │   ├── servo.h
│   │   └── constants.h
│   └── lwip/                          # lwIP headers (if not using system-wide lwIP)
├── apps/                              # PTP protocol logic
│   ├── protocol.c
│   ├── protocol.h
│   ├── servo.c
│   ├── servo.h
├── netif/                             # lwIP netif driver
│   ├── ethernet.c                     # Generic Ethernet logic (from lwIP)
│   ├── temacif.c                      # Xilinx-specific SGMII/SFP logic (to be written)
│   └── temacif.h
├── CMakeLists.txt or Makefile         # For building bare metal on KCU105
├── ptp_config.h                       # Optional: Configurable defines
└── README.md

# Notes:
- `ptpd.c` contains all queue management, UDP binding, message send/receive, and time adjustment logic.
- `apps/protocol.c` will contain Sync, DelayReq, Follow_Up, Delay_Resp logic.
- `main.c` initializes platform, lwIP, and calls ptpd_periodic_handler() in a loop.
- `platform/` holds board-specific init like clock, Ethernet PHY/SFP setup.
- `include/ptpd/` contains PTP structures, enums, constants, and external function declarations.
- `netif/` includes only necessary low-level drivers like `temacif.c`, excluding unrelated interfaces like SLIP, PPP, ZEP, etc.



             ┌────────────┐
             │  UDP PCB   │◄───── udp_new()
             └────┬───────┘
                  │
          udp_recv(…, callback, …)
                  ▼
          ┌────────────────┐
Packet →  │  Callback Fn   │◄─── udp_bind(…, PTP_PORT)
          │  (event/gen)   │
          └────┬───────────┘
               ▼
         ┌──────────────┐
         │ PTP Queue    │
         │ (event_q /   │
         │  general_q)  │
         └────┬─────────┘
              ▼
        ptpd_net_recv()
              ▼
         Protocol handler

1. Vivado Hardware Platform Prep (already assumed ready)
You've said your Vivado block design is done. Make sure of the following:

✅ MicroBlaze system with:

DDR4 + MIG

Ethernet via AXI TEMAC + FIFO + DMA or AXI Ethernet Lite (MAC)

Clocking Wizard (125 MHz or 200 MHz)

✅ Interrupt Controller if needed (optional in polling loop)

✅ Exported XSA file (File → Export Hardware → Include bitstream)

🧱 2. Create a Vitis Platform Project
Open Vitis IDE → New Platform Project:

Import the .xsa you exported from Vivado

Give it a name like kcu105_ptp_platform

Vitis will automatically recognize hardware peripherals:

DDR4 memory, Ethernet, UART, timers

💻 3. Create an Application Project (Bare Metal)
File → New Application Project

Choose the kcu105_ptp_platform as the hardware platform

Target processor: microblaze_0

OS: Standalone

Template: choose Empty Application

Name it: ptp_baremetal_app

📁 4. Import Your Software Files
Your current software is organized into a project root. Here's how to bring it in:

Copy These into src/ folder of the app:
main.c

ptpd.c, ptpd.h

ptp_config.h

Create subfolders:
swift
Copy
Edit
src/
├── main.c
├── ptpd.c
├── ptpd.h
├── ptp_config.h
├── apps/
│   ├── protocol.c
│   ├── protocol.h
│   ├── servo.c
│   └── servo.h
├── platform/
│   ├── platform.c
│   └── platform.h
├── include/
│   └── ptpd/
│       ├── constants.h
│       ├── ptpd.h
│       ├── protocol.h
│       └── servo.h
├── netif/
│   ├── temacif.c
│   └── temacif.h
⚙️ 5. Configure the Build
Includes paths (Vitis → Project Settings → C/C++ Build → Settings → Includes):

css
Copy
Edit
src/
src/include/
src/include/ptpd/
src/apps/
src/platform/
src/netif/
Defines (for raw lwIP use and options):

ini
Copy
Edit
-DLWIP_RAW=1
-DLWIP_TIMEVAL_PRIVATE=0
-DNO_SYS=1
Compiler Flags:

diff
Copy
Edit
-O2 -g -Wall
🌐 6. Setup lwIP
You need to:

Use the lwIP standalone port

Enable only essential features in lwipopts.h:

c
Copy
Edit
#define NO_SYS                      1
#define LWIP_SOCKET                0
#define LWIP_NETCONN               0
#define LWIP_RAW                   1
#define LWIP_UDP                   1
#define LWIP_ICMP                  0
#define LWIP_TCP                   0
#define MEM_ALIGNMENT              4
#define MEMP_NUM_PBUF              16
#define PBUF_POOL_SIZE             8
#define LWIP_DHCP                  1  // Optional
Place lwipopts.h inside include/ or platform/

🔌 7. temacif.c Integration
In temacif.c, make sure you:

Implement low_level_init() using xemacpsif or temac_adapter

Implement low_level_output() and low_level_input() to handle buffers

Register the interface with netif_add() in your platform_init()

🧪 8. Run on KCU105
Connect UART, Ethernet (SFP or RJ45), and JTAG

Program the board via Vitis

Open UART terminal (115200 baud)

You should see logs like:

vbnet
Copy
Edit
ptpd: startup...
ptpd: joined multicast group...
ptpd: Sync sent...
Optionally, test with another PTP instance (like ptpd on a Linux PC)

📡 9. Timestamping (Optional)
If your hardware supports it (e.g., via MAC timestamp registers), you can:

Extend pbuf with time fields

Read timestamps in ptpd_net_recv and ptpd_net_send

Would you like me to generate a full Vitis-ready folder as a ZIP, or walk through the temacif.c and platform.c implementation next?







You said:
where should you write these commands?Defines (for raw lwIP use and options):

ini
Copy
Edit
-DLWIP_RAW=1
-DLWIP_TIMEVAL_PRIVATE=0
-DNO_SYS=1
Compiler Flags:

diff
Copy
Edit
-O2 -g -Wall


ChatGPT said:
Great question.

In Vitis, to set the compiler flags and preprocessor defines, you do this through the Application Project settings. Here’s how:

✅ Where to set:
Vitis IDE GUI
Right-click on your Application Project (e.g., ptp_baremetal_app)

Click Properties

Go to C/C++ Build → Settings

Under the Tool Settings tab, do the following:

🧩 Preprocessor Defines (e.g., -DLWIP_RAW=1)
Go to:
C Compiler → Preprocessor → Defined symbols

Click Add (+) and enter:

ini
Copy
Edit
LWIP_RAW=1
LWIP_TIMEVAL_PRIVATE=0
NO_SYS=1
🛠 Compiler Flags (e.g., -O2 -g -Wall)
Go to:
C Compiler → Miscellaneous → Other flags

Add:

diff
Copy
Edit
-O2 -g -Wall
📝 If using a Makefile instead
In your Makefile, add these lines:

make
Copy
Edit
CFLAGS += -O2 -g -Wall
CFLAGS += -DLWIP_RAW=1 -DLWIP_TIMEVAL_PRIVATE=0 -DNO_SYS=1
